export default {
  hits: [
    {
      created_at: '2023-05-01T14:45:35.000Z',
      title: 'Ask HN: Data Management for AI Training',
      url: null,
      author: 'Gluber',
      points: 1,
      story_text:
        'I am currently in charge of deciding on the tech stack for a large scale AI project in the computer vision space.<p>Most things are settled, but we expect to collect a LOT of data that will be labeled and or auto labeled ( to the tune of 100 MIO video clips )<p>We will be training multiple models for different tasks from that data and we need a good system to organize it.<p>Does anybody have any tips experiences with that kind of thing. \nWe can use any on premise or cloud solution....<p>Specifically we would need<p>* Data ingestion pipeline ( data will come from field personel ) \n* Data versioning\n* Being able to define datasets that are a subset of the whole collected data\n* Inexpensive storage ( e.g S3 or similar ) \n* Branching&#x2F;Merging for maintaining production training data sets\n* Metadata storage and query capabilities ... \n* User interface for less tech savy people ( e.g just a git like command line is fine for engineers but not for field personell who are not in IT )<p>I know of tools like https:&#x2F;&#x2F;dvc.org&#x2F; but a) they are just layers on top of git b) break appart on huge datasets without a folder hierarchy ( git tree objects just don&#x27;t work for linear lists of items ) are only useable by IT personell, and require checking out at least a part of the dataset.<p>Our datasets would be 100.000.000 x 100 MB = 10 PB of raw data. Training data should be delivered to training nodes via network etc.. we just can&#x27;t have a full checkout of that data...',
      comment_text: null,
      num_comments: 1,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1682974266,
      _tags: ['story', 'author_Gluber', 'story_35763004', 'ask_hn'],
      objectID: '35763004',
      _highlightResult: {
        title: {
          value: 'Ask HN: Data Management for AI Training',
          matchLevel: 'none',
          matchedWords: [],
        },
        author: {
          value: 'Gluber',
          matchLevel: 'none',
          matchedWords: [],
        },
        story_text: {
          value:
            "I am currently in charge of deciding on the tech stack for a large scale AI project in the computer vision space.<p>Most things are settled, but we expect to collect a LOT of data that will be labeled and or auto labeled ( to the tune of 100 MIO video clips )<p>We will be training multiple models for different tasks from that data and we need a good system to organize it.<p>Does anybody have any tips experiences with that kind of thing. \nWe can use any on premise or cloud solution....<p>Specifically we would need<p>* Data ingestion pipeline ( data will come from field personel ) \n* Data versioning\n* Being able to define datasets that are a subset of the whole collected data\n* Inexpensive storage ( e.g S3 or similar ) \n* Branching/Merging for maintaining production training data sets\n* Metadata storage and query capabilities ... \n* User interface for less tech savy people ( e.g just a git like command line is fine for engineers but not for field personell who are not in IT )<p>I know of tools like https://dvc.org/ but a) they are just layers on top of git b) break appart on huge datasets without a folder hierarchy ( git tree objects just don't work for linear lists of items ) are only useable by IT personell, and require checking out at least a part of the dataset.<p>Our datasets would be 100.000.000 x 100 MB = 10 PB of raw data. Training data should be delivered to training <em>nodes</em> via network etc.. we just can't have a full checkout of that data...",
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
      },
    },
    {
      created_at: '2023-04-29T13:55:20.000Z',
      title:
        'Node.js v20: Test Runner, Permission Model, Sea, V8 JavaScript Engine 11.3',
      url: 'https://kinsta.com/blog/node-js-20/',
      author: 'markgavalda',
      points: 2,
      story_text: null,
      comment_text: null,
      num_comments: 0,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1682776520,
      _tags: ['story', 'author_markgavalda', 'story_35752871'],
      objectID: '35752871',
      _highlightResult: {
        title: {
          value:
            'Node.js v20: Test Runner, Permission Model, Sea, V8 JavaScript Engine 11.3',
          matchLevel: 'none',
          matchedWords: [],
        },
        url: {
          value: 'https://kinsta.com/blog/<em>node-js</em>-20/',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
        author: {
          value: 'markgavalda',
          matchLevel: 'none',
          matchedWords: [],
        },
      },
    },
    {
      created_at: '2023-04-27T23:34:47.000Z',
      title: 'Reducing the cost of string serialization in Node.js core',
      url: 'https://www.yagiz.co/reducing-the-cost-of-string-serialization-in-nodejs-core',
      author: 'Fudgel',
      points: 3,
      story_text: null,
      comment_text: null,
      num_comments: 0,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1682638487,
      _tags: ['story', 'author_Fudgel', 'story_35735848'],
      objectID: '35735848',
      _highlightResult: {
        title: {
          value: 'Reducing the cost of string serialization in Node.js core',
          matchLevel: 'none',
          matchedWords: [],
        },
        url: {
          value:
            'https://www.yagiz.co/reducing-the-cost-of-string-serialization-in-<em>nodejs</em>-core',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
        author: {
          value: 'Fudgel',
          matchLevel: 'none',
          matchedWords: [],
        },
      },
    },
    {
      created_at: '2023-04-26T10:14:24.000Z',
      title: 'Getting Started with Fastify for Node.js',
      url: 'https://blog.appsignal.com/2023/04/26/getting-started-with-fastify-for-nodejs.html',
      author: 'amalinovic',
      points: 1,
      story_text: null,
      comment_text: null,
      num_comments: 0,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1682504064,
      _tags: ['story', 'author_amalinovic', 'story_35711542'],
      objectID: '35711542',
      _highlightResult: {
        title: {
          value: 'Getting Started with Fastify for Node.js',
          matchLevel: 'none',
          matchedWords: [],
        },
        url: {
          value:
            'https://blog.appsignal.com/2023/04/26/getting-started-with-fastify-for-<em>nodejs</em>.html',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
        author: {
          value: 'amalinovic',
          matchLevel: 'none',
          matchedWords: [],
        },
      },
    },
    {
      created_at: '2023-04-25T04:34:43.000Z',
      title: 'Cellular Automata Are Turing Complete, Build Neuromorphic Chips?',
      url: null,
      author: 'sim04ful',
      points: 2,
      story_text:
        'Here&#x27;s an idea that has been stewing in my head for months.<p>I implore you to ignore my shortcomings and just think the general idea over to see if there are some merits:<p>Let&#x27;s start with a few questions:<p>Is it possible to build neuromorphic processors by taking advantage of the turing completeness of cellular automata by using a hardware implementation.<p>If a hardware cell could independently change its state according to a ruleset, wouldn&#x27;t that mean we would have a clock-less massively parallel computer similar to the brain ?<p>If we could create a hardwired cellular automata that implements rule 110. Couldn&#x27;t we perform arbitrary computation ?<p>Now here&#x27;s the main idea:<p>The idea revolves around a 3D gel-based substrate containing conductive particles, which interact according to localized, decentralized rules inspired by cellular automata. In this concept, the nodes or neurons are not discrete components like those found in traditional hardware-based neural networks. Instead, they emerge from the conductive hydrogel substrate through local interactions between its constituents.<p>These conductive particles create pathways within the hydrogel matrix, altering the material&#x27;s overall conductivity and enabling the formation of neuron-like structures. The particles self-organize according to rule sets without any external influence. As they establish new connections or sever existing ones, the information flow within the hydrogel matrix shifts, effectively implementing the cellular automata ruleset.<p>Each &quot;cell&quot; or region within the gel operates autonomously and communicates with neighboring cells. The cellular automata rules govern their behavior, collectively resulting in the processor&#x27;s emergent computational capabilities.<p>Some literature:<p>All-Polymer Conducting Fibers and 3D Prints via Melt Processing and Templated Polymerization\nhttps:&#x2F;&#x2F;pubs.acs.org&#x2F;doi&#x2F;10.1021&#x2F;acsami.9b20615<p>Neuromorphic Computation Using Quantum-Dot Cellular Automata\nhttps:&#x2F;&#x2F;ieeexplore.ieee.org&#x2F;document&#x2F;8123685',
      comment_text: null,
      num_comments: 1,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1682397283,
      _tags: ['story', 'author_sim04ful', 'story_35696521'],
      objectID: '35696521',
      _highlightResult: {
        title: {
          value:
            'Cellular Automata Are Turing Complete, Build Neuromorphic Chips?',
          matchLevel: 'none',
          matchedWords: [],
        },
        author: {
          value: 'sim04ful',
          matchLevel: 'none',
          matchedWords: [],
        },
        story_text: {
          value:
            "Here's an idea that has been stewing in my head for months.<p>I implore you to ignore my shortcomings and just think the general idea over to see if there are some merits:<p>Let's start with a few questions:<p>Is it possible to build neuromorphic processors by taking advantage of the turing completeness of cellular automata by using a hardware implementation.<p>If a hardware cell could independently change its state according to a ruleset, wouldn't that mean we would have a clock-less massively parallel computer similar to the brain ?<p>If we could create a hardwired cellular automata that implements rule 110. Couldn't we perform arbitrary computation ?<p>Now here's the main idea:<p>The idea revolves around a 3D gel-based substrate containing conductive particles, which interact according to localized, decentralized rules inspired by cellular automata. In this concept, the <em>nodes</em> or neurons are not discrete components like those found in traditional hardware-based neural networks. Instead, they emerge from the conductive hydrogel substrate through local interactions between its constituents.<p>These conductive particles create pathways within the hydrogel matrix, altering the material's overall conductivity and enabling the formation of neuron-like structures. The particles self-organize according to rule sets without any external influence. As they establish new connections or sever existing ones, the information flow within the hydrogel matrix shifts, effectively implementing the cellular automata ruleset.<p>Each &quot;cell&quot; or region within the gel operates autonomously and communicates with neighboring cells. The cellular automata rules govern their behavior, collectively resulting in the processor's emergent computational capabilities.<p>Some literature:<p>All-Polymer Conducting Fibers and 3D Prints via Melt Processing and Templated Polymerization\nhttps://pubs.acs.org/doi/10.1021/acsami.9b20615<p>Neuromorphic Computation Using Quantum-Dot Cellular Automata\nhttps://ieeexplore.ieee.org/document/8123685",
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
      },
    },
    {
      created_at: '2023-04-24T07:55:37.000Z',
      title: 'Ask HN: What are the best resources for web data mining?',
      url: null,
      author: 's-a-p',
      points: 1,
      story_text:
        'What are your best resources (textbooks, papers, blog posts) around web data mining? More specifically, on extracting specific elements from a webpage e.g a product price, description etc... Side question: there is a whole range of approaches going from simple feature engineering on DOM tree nodes with standard classifiers to graph neural nets. Have any of you put these kinds of models into production? Any interesting tradeoffs to discuss?<p>Thanks!!',
      comment_text: null,
      num_comments: 0,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1682322937,
      _tags: ['story', 'author_s-a-p', 'story_35684818', 'ask_hn'],
      objectID: '35684818',
      _highlightResult: {
        title: {
          value: 'Ask HN: What are the best resources for web data mining?',
          matchLevel: 'none',
          matchedWords: [],
        },
        author: {
          value: 's-a-p',
          matchLevel: 'none',
          matchedWords: [],
        },
        story_text: {
          value:
            'What are your best resources (textbooks, papers, blog posts) around web data mining? More specifically, on extracting specific elements from a webpage e.g a product price, description etc... Side question: there is a whole range of approaches going from simple feature engineering on DOM tree <em>nodes</em> with standard classifiers to graph neural nets. Have any of you put these kinds of models into production? Any interesting tradeoffs to discuss?<p>Thanks!!',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
      },
    },
    {
      created_at: '2023-04-22T08:37:36.000Z',
      title: 'Preventing and Debugging Memory Leaks in Node.js',
      url: 'https://betterstack.com/community/guides/scaling-nodejs/high-performance-nodejs/nodejs-memory-leaks/',
      author: 'stanulilic',
      points: 1,
      story_text: null,
      comment_text: null,
      num_comments: 0,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1682152656,
      _tags: ['story', 'author_stanulilic', 'story_35664506'],
      objectID: '35664506',
      _highlightResult: {
        title: {
          value: 'Preventing and Debugging Memory Leaks in Node.js',
          matchLevel: 'none',
          matchedWords: [],
        },
        url: {
          value:
            'https://betterstack.com/community/guides/scaling-<em>nodejs</em>/high-performance-<em>nodejs</em>/<em>nodejs</em>-memory-leaks/',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
        author: {
          value: 'stanulilic',
          matchLevel: 'none',
          matchedWords: [],
        },
      },
    },
    {
      created_at: '2023-04-21T12:36:00.000Z',
      title:
        'Show HN: Write React in the Jupyter notebook without JavaScript build tools',
      url: 'https://github.com/widgetti/ipyreact',
      author: 'maartenbreddels',
      points: 3,
      story_text:
        'The friction of getting a small snippet of React code into the Jupyter notebook really high. Especially when you want to have communication between the browser and the Python process.<p>Using sucrase to do transpiling of jsx&#x2F;tsx in the browser, and using ES modules features (+shims) allows you to take for instance any Material UI example (like <a href="https:&#x2F;&#x2F;mui.com&#x2F;material-ui&#x2F;react-rating&#x2F;" rel="nofollow">https:&#x2F;&#x2F;mui.com&#x2F;material-ui&#x2F;react-rating&#x2F;</a>) and have it work without having to install NodeJS and set up a while build toolchain.<p>Feels like old-school JavaScript dev again :)<p>pip install ipyreact and it <i>just works</i>',
      comment_text: null,
      num_comments: 0,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1682080560,
      _tags: ['story', 'author_maartenbreddels', 'story_35652778', 'show_hn'],
      objectID: '35652778',
      _highlightResult: {
        title: {
          value:
            'Show HN: Write React in the Jupyter notebook without JavaScript build tools',
          matchLevel: 'none',
          matchedWords: [],
        },
        url: {
          value: 'https://github.com/widgetti/ipyreact',
          matchLevel: 'none',
          matchedWords: [],
        },
        author: {
          value: 'maartenbreddels',
          matchLevel: 'none',
          matchedWords: [],
        },
        story_text: {
          value:
            'The friction of getting a small snippet of React code into the Jupyter notebook really high. Especially when you want to have communication between the browser and the Python process.<p>Using sucrase to do transpiling of jsx/tsx in the browser, and using ES modules features (+shims) allows you to take for instance any Material UI example (like <a href="https://mui.com/material-ui/react-rating/" rel="nofollow">https://mui.com/material-ui/react-rating/</a>) and have it work without having to install <em>NodeJS</em> and set up a while build toolchain.<p>Feels like old-school JavaScript dev again :)<p>pip install ipyreact and it <i>just works</i>',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
      },
    },
    {
      created_at: '2023-04-21T07:14:05.000Z',
      title: 'Permissions API in Node.js v20',
      url: 'https://nodejs.org/api/permissions.html',
      author: 'anishd19',
      points: 4,
      story_text: null,
      comment_text: null,
      num_comments: 1,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1682061245,
      _tags: ['story', 'author_anishd19', 'story_35650651'],
      objectID: '35650651',
      _highlightResult: {
        title: {
          value: 'Permissions API in Node.js v20',
          matchLevel: 'none',
          matchedWords: [],
        },
        url: {
          value: 'https://<em>nodejs</em>.org/api/permissions.html',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
        author: {
          value: 'anishd19',
          matchLevel: 'none',
          matchedWords: [],
        },
      },
    },
    {
      created_at: '2023-04-19T14:21:01.000Z',
      title:
        'Ask HN: Is there any embeddable REPL? Like RunKit, but for many languages',
      url: null,
      author: 'wenbin',
      points: 3,
      story_text:
        'RunKit is great, and we have been using it on our api doc [1].<p>However, RunKit was acquired by Stripe and development seems to stop. For example, it’s slow to update to support new package versions [2] and it only supports nodejs, not other server side languages<p>Ideally, we want something like RunKit, but with active development &#x2F; improvement and multi-language support.<p>[1] https:&#x2F;&#x2F;www.listennotes.com&#x2F;api&#x2F;docs&#x2F;<p>[2] https:&#x2F;&#x2F;discuss.runkit.com&#x2F;t&#x2F;new-packages-and-versions-not-showing-up&#x2F;1544',
      comment_text: null,
      num_comments: 0,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1681914061,
      _tags: ['story', 'author_wenbin', 'story_35628531', 'ask_hn'],
      objectID: '35628531',
      _highlightResult: {
        title: {
          value:
            'Ask HN: Is there any embeddable REPL? Like RunKit, but for many languages',
          matchLevel: 'none',
          matchedWords: [],
        },
        author: {
          value: 'wenbin',
          matchLevel: 'none',
          matchedWords: [],
        },
        story_text: {
          value:
            'RunKit is great, and we have been using it on our api doc [1].<p>However, RunKit was acquired by Stripe and development seems to stop. For example, it’s slow to update to support new package versions [2] and it only supports <em>nodejs</em>, not other server side languages<p>Ideally, we want something like RunKit, but with active development / improvement and multi-language support.<p>[1] https://www.listennotes.com/api/docs/<p>[2] https://discuss.runkit.com/t/new-packages-and-versions-not-showing-up/1544',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
      },
    },
    {
      created_at: '2023-04-19T14:06:47.000Z',
      title: 'Node.js Pitfalls to Avoid',
      url: 'https://blog.appsignal.com/2023/04/19/nodejs-pitfalls-to-avoid.html',
      author: 'unripe_syntax',
      points: 1,
      story_text: null,
      comment_text: null,
      num_comments: 0,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1681913207,
      _tags: ['story', 'author_unripe_syntax', 'story_35628320'],
      objectID: '35628320',
      _highlightResult: {
        title: {
          value: 'Node.js Pitfalls to Avoid',
          matchLevel: 'none',
          matchedWords: [],
        },
        url: {
          value:
            'https://blog.appsignal.com/2023/04/19/<em>nodejs</em>-pitfalls-to-avoid.html',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
        author: {
          value: 'unripe_syntax',
          matchLevel: 'none',
          matchedWords: [],
        },
      },
    },
    {
      created_at: '2023-04-19T13:22:37.000Z',
      title: 'Node.js Single Executable Applications',
      url: 'https://nodejs.org/api/single-executable-applications.html',
      author: 'omnibrain',
      points: 2,
      story_text: null,
      comment_text: null,
      num_comments: 0,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1681910557,
      _tags: ['story', 'author_omnibrain', 'story_35627811'],
      objectID: '35627811',
      _highlightResult: {
        title: {
          value: 'Node.js Single Executable Applications',
          matchLevel: 'none',
          matchedWords: [],
        },
        url: {
          value:
            'https://<em>nodejs</em>.org/api/single-executable-applications.html',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
        author: {
          value: 'omnibrain',
          matchLevel: 'none',
          matchedWords: [],
        },
      },
    },
    {
      created_at: '2023-04-18T22:23:52.000Z',
      title: 'Node.js 20 is now available',
      url: 'https://nodejs.org/en/blog/announcements/v20-release-announce',
      author: 'ovaistariq',
      points: 153,
      story_text: null,
      comment_text: null,
      num_comments: 99,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1681856632,
      _tags: ['story', 'author_ovaistariq', 'story_35621238'],
      objectID: '35621238',
      _highlightResult: {
        title: {
          value: 'Node.js 20 is now available',
          matchLevel: 'none',
          matchedWords: [],
        },
        url: {
          value:
            'https://<em>nodejs</em>.org/en/blog/announcements/v20-release-announce',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
        author: {
          value: 'ovaistariq',
          matchLevel: 'none',
          matchedWords: [],
        },
      },
    },
    {
      created_at: '2023-04-18T18:08:43.000Z',
      title: 'Node.js Microservice with gRPC and TypeScript',
      url: 'https://rsbh.dev/blogs/grpc-with-nodejs-typescript',
      author: 'rishabh09',
      points: 1,
      story_text: null,
      comment_text: null,
      num_comments: 0,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1681841323,
      _tags: ['story', 'author_rishabh09', 'story_35617582'],
      objectID: '35617582',
      _highlightResult: {
        title: {
          value: 'Node.js Microservice with gRPC and TypeScript',
          matchLevel: 'none',
          matchedWords: [],
        },
        url: {
          value: 'https://rsbh.dev/blogs/grpc-with-<em>nodejs</em>-typescript',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
        author: {
          value: 'rishabh09',
          matchLevel: 'none',
          matchedWords: [],
        },
      },
    },
    {
      created_at: '2023-04-18T16:52:38.000Z',
      title: 'Node.js 20 Now Available',
      url: 'https://openjsf.org/blog/2023/04/18/node-js-20-now-available/',
      author: 'leodriesch',
      points: 7,
      story_text: null,
      comment_text: null,
      num_comments: 2,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1681836758,
      _tags: ['story', 'author_leodriesch', 'story_35616545'],
      objectID: '35616545',
      _highlightResult: {
        title: {
          value: 'Node.js 20 Now Available',
          matchLevel: 'none',
          matchedWords: [],
        },
        url: {
          value:
            'https://openjsf.org/blog/2023/04/18/<em>node-js</em>-20-now-available/',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
        author: {
          value: 'leodriesch',
          matchLevel: 'none',
          matchedWords: [],
        },
      },
    },
    {
      created_at: '2023-04-18T16:46:18.000Z',
      title: 'Node.js – v20.0.0',
      url: 'https://nodejs.org/en/blog/release/v20.0.0',
      author: 'bricss',
      points: 55,
      story_text: null,
      comment_text: null,
      num_comments: 9,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1681836378,
      _tags: ['story', 'author_bricss', 'story_35616439'],
      objectID: '35616439',
      _highlightResult: {
        title: {
          value: 'Node.js – v20.0.0',
          matchLevel: 'none',
          matchedWords: [],
        },
        url: {
          value: 'https://<em>nodejs</em>.org/en/blog/release/v20.0.0',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
        author: {
          value: 'bricss',
          matchLevel: 'none',
          matchedWords: [],
        },
      },
    },
    {
      created_at: '2023-04-17T16:25:57.000Z',
      title: 'Ask HN: In-editor visual mind map/graph tool for code?',
      url: null,
      author: 'Nezteb',
      points: 4,
      story_text:
        'I&#x27;d love a tool that lets me manually create maps&#x2F;graphs between files&#x2F;modules&#x2F;functions in code and be able to jump between nodes. What would be even cooler is LSP support so that if code changed, the tool would be able to keep the map&#x2F;graph up-to-date.<p>So far the closest thing I can find is a VS Code extension: https:&#x2F;&#x2F;github.com&#x2F;Pjaerr&#x2F;Code-Flow-Extension<p>Apparently there also used to be a tool&#x2F;service called &quot;Grok&quot; that is now dead and the original domain redirects to spam: https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20210812070223&#x2F;https:&#x2F;&#x2F;www.trygrok.com&#x2F;<p>Here&#x27;s an old HN thread about Grok, which at least shows that a tool like this would be useful to others: https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=28150169<p>Has anyone come across a tool like this recently?',
      comment_text: null,
      num_comments: 4,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1681748757,
      _tags: ['story', 'author_Nezteb', 'story_35603022', 'ask_hn'],
      objectID: '35603022',
      _highlightResult: {
        title: {
          value: 'Ask HN: In-editor visual mind map/graph tool for code?',
          matchLevel: 'none',
          matchedWords: [],
        },
        author: {
          value: 'Nezteb',
          matchLevel: 'none',
          matchedWords: [],
        },
        story_text: {
          value:
            "I'd love a tool that lets me manually create maps/graphs between files/modules/functions in code and be able to jump between <em>nodes</em>. What would be even cooler is LSP support so that if code changed, the tool would be able to keep the map/graph up-to-date.<p>So far the closest thing I can find is a VS Code extension: https://github.com/Pjaerr/Code-Flow-Extension<p>Apparently there also used to be a tool/service called &quot;Grok&quot; that is now dead and the original domain redirects to spam: https://web.archive.org/web/20210812070223/https://www.trygrok.com/<p>Here's an old HN thread about Grok, which at least shows that a tool like this would be useful to others: https://news.ycombinator.com/item?id=28150169<p>Has anyone come across a tool like this recently?",
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
      },
    },
    {
      created_at: '2023-04-16T07:58:33.000Z',
      title: 'High Performance with Node.js',
      url: 'https://www.nearform.com/blog/the-secrets-behind-high-performance-with-node-js/',
      author: 'franky47',
      points: 6,
      story_text: null,
      comment_text: null,
      num_comments: 0,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1681631913,
      _tags: ['story', 'author_franky47', 'story_35588114'],
      objectID: '35588114',
      _highlightResult: {
        title: {
          value: 'High Performance with Node.js',
          matchLevel: 'none',
          matchedWords: [],
        },
        url: {
          value:
            'https://www.nearform.com/blog/the-secrets-behind-high-performance-with-<em>node-js</em>/',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
        author: {
          value: 'franky47',
          matchLevel: 'none',
          matchedWords: [],
        },
      },
    },
    {
      created_at: '2023-04-15T15:47:57.000Z',
      title:
        'Hetzner-k3s v1.1.1 – the easiest way to create k3s clusters in Hetzner Cloud',
      url: null,
      author: 'SkyLinx',
      points: 3,
      story_text:
        'This is my tool to quickly create k3s clusters in Hetzner Cloud.<p>The main change in this release allows creating node pools with any number of nodes - you are limited only by the caps on your Hetzner account. This update makes it possible to create pretty large clusters for cheap<p>https:&#x2F;&#x2F;github.com&#x2F;vitobotta&#x2F;hetzner-k3s<p>Looking forward to any feedback, comments or questions :)',
      comment_text: null,
      num_comments: 1,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1681573677,
      _tags: ['story', 'author_SkyLinx', 'story_35581701'],
      objectID: '35581701',
      _highlightResult: {
        title: {
          value:
            'Hetzner-k3s v1.1.1 – the easiest way to create k3s clusters in Hetzner Cloud',
          matchLevel: 'none',
          matchedWords: [],
        },
        author: {
          value: 'SkyLinx',
          matchLevel: 'none',
          matchedWords: [],
        },
        story_text: {
          value:
            'This is my tool to quickly create k3s clusters in Hetzner Cloud.<p>The main change in this release allows creating node pools with any number of <em>nodes</em> - you are limited only by the caps on your Hetzner account. This update makes it possible to create pretty large clusters for cheap<p>https://github.com/vitobotta/hetzner-k3s<p>Looking forward to any feedback, comments or questions :)',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
      },
    },
    {
      created_at: '2023-04-15T05:44:17.000Z',
      title: 'How to represent large numbers in your Node.js app',
      url: 'https://blog.logrocket.com/how-to-represent-large-numbers-node-js-app/',
      author: 'michaelsolati',
      points: 2,
      story_text: null,
      comment_text: null,
      num_comments: 0,
      story_id: null,
      story_title: null,
      story_url: null,
      parent_id: null,
      created_at_i: 1681537457,
      _tags: ['story', 'author_michaelsolati', 'story_35577934'],
      objectID: '35577934',
      _highlightResult: {
        title: {
          value: 'How to represent large numbers in your Node.js app',
          matchLevel: 'none',
          matchedWords: [],
        },
        url: {
          value:
            'https://blog.logrocket.com/how-to-represent-large-numbers-<em>node-js</em>-app/',
          matchLevel: 'full',
          fullyHighlighted: false,
          matchedWords: ['nodejs'],
        },
        author: {
          value: 'michaelsolati',
          matchLevel: 'none',
          matchedWords: [],
        },
      },
    },
  ],
  nbHits: 8480,
  page: 0,
  nbPages: 50,
  hitsPerPage: 20,
  exhaustiveNbHits: false,
  exhaustiveTypo: false,
  exhaustive: {
    nbHits: false,
    typo: false,
  },
  query: 'nodejs',
  params:
    'advancedSyntax=true&analytics=true&analyticsTags=backend&query=nodejs&tags=story',
  processingTimeMS: 13,
  processingTimingsMS: {
    afterFetch: {
      total: 1,
    },
    fetch: {
      scanning: 6,
      total: 12,
    },
    request: {
      roundTrip: 13,
    },
    total: 13,
  },
  serverTimeMS: 14,
};
